version: "3.9"

volumes:
  postgres_data_crm: {}

networks:
  crm:
    external: true

services:
  # PostgreSQL Hizmeti
  postgres:
    container_name: postgres-crm
    restart: unless-stopped
    image: postgres:15-alpine
    ports:
      - "5432:5432"
    volumes:
      - postgres_data_crm:/var/lib/postgresql/data
#      - ./init-db.sh:/docker-entrypoint-initdb.d/init-db.sh
    environment:
      # PostgreSQL Bağlantı Bilgileri
      POSTGRES_DB: askadrovip
      POSTGRES_USER: khang
      POSTGRES_PASSWORD: osiioQxJL74v
    networks:
      - crm
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U osiioQxJL74v"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Keycloak Hizmeti
  keycloak:
    container_name: keycloak-crm
    image: quay.io/keycloak/keycloak:26.1.0
    restart: always
    command: ["start-dev", "--import-realm"]
    environment:
      # default
      DB_VENDOR: postgres
      DB_ADDR: localhost
      DB_PORT: 5432
      DB_DATABASE: keycloak
      DB_USER: khang
      DB_PASSWORD: osiioQxJL74v
      # Keycloak Yönetim Bilgileri
      KEYCLOAK_ADMIN: khang
      KEYCLOAK_ADMIN_PASSWORD: osiioQxJL74v
      # Veritabanı Konfigürasyonu
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://postgres:5432/keycloak
      KC_DB_USERNAME: khang
      KC_DB_PASSWORD: osiioQxJL74v
      # Keycloak Ayarları
      KC_HOSTNAME: localhost
      KC_HOSTNAME_STRICT: false
      KC_HEALTH_ENABLED: true
      KEYCLOAK_IMPORT: /opt/keycloak/data/import/realm-export.json
    ports:
      - "8080:8080" # Keycloak HTTP
      - "8443:8443" # Keycloak HTTPS
    volumes:
      - ./keycloak/realm-export.json:/opt/keycloak/data/import/realm-export.json:ro
    networks:
      - crm
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  nginx:
    image: nginx:1.15-alpine
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./data/nginx:/etc/nginx/conf.d
      - ./data/certbot/conf:/etc/letsencrypt
      - ./data/certbot/www:/var/www/certbot
    command: "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'"
    # if your service is running outside of docker uncomment this and comment out networks section
    #network_mode: bridge
    networks:
      - crm
  certbot:
    image: certbot/certbot
    restart: unless-stopped
    volumes:
      - ./data/certbot/conf:/etc/letsencrypt
      - ./data/certbot/www:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
    # if your service is running outside of docker uncomment this and comment out networks section
    #network_mode: bridge
    networks:
      - crm

  app:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "5062:5062"
    env_file:
      - .env
    networks:
      - crm
    command: ["node", "dist/main.js"]